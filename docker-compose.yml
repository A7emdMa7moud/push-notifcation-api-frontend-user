version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: push-notification-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: push-notification-db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - push-notification-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: push-notification-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/push-notification-db?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-here
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Firebase Admin SDK credentials (set these in production)
      FIREBASE_PROJECT_ID: your-firebase-project-id
      FIREBASE_PRIVATE_KEY_ID: your-private-key-id
      FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nYour Private Key Here\n-----END PRIVATE KEY-----\n"
      FIREBASE_CLIENT_EMAIL: firebase-adminsdk-xxxxx@your-project.iam.gserviceaccount.com
      FIREBASE_CLIENT_ID: your-client-id
      FIREBASE_AUTH_URI: https://accounts.google.com/o/oauth2/auth
      FIREBASE_TOKEN_URI: https://oauth2.googleapis.com/token
      FIREBASE_AUTH_PROVIDER_X509_CERT_URL: https://www.googleapis.com/oauth2/v1/certs
      FIREBASE_CLIENT_X509_CERT_URL: https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-xxxxx%40your-project.iam.gserviceaccount.com
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    networks:
      - push-notification-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend User App
  frontend-user:
    build:
      context: ./frontend-user
      dockerfile: Dockerfile
    container_name: push-notification-frontend-user
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_FIREBASE_VAPID_KEY: YOUR_VAPID_KEY_HERE
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - push-notification-network

  # Frontend Admin App (when created)
  # frontend-admin:
  #   build:
  #     context: ./frontend-admin
  #     dockerfile: Dockerfile
  #   container_name: push-notification-frontend-admin
  #   restart: unless-stopped
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:5000/api
  #     NEXT_PUBLIC_FIREBASE_VAPID_KEY: YOUR_VAPID_KEY_HERE
  #   ports:
  #     - "3001:3000"
  #   depends_on:
  #     - backend
  #   networks:
  #     - push-notification-network

volumes:
  mongodb_data:
    driver: local

networks:
  push-notification-network:
    driver: bridge 